#!/bin/bash
set -euo pipefail

# Check for llm installation
if ! command -v llm >/dev/null 2>&1; then
    echo "Error: llm command not found. Install from https://llm.datasette.io/en/stable/setup.html" >&2
    exit 1
fi

usage() {
    cat << EOF
Usage: $(basename "$0") [options]

Generate and commit changes using AI messages.

Options:
    -m, --model MODEL  Specify the LLM model to use (default: deepseek-coder or o1-mini)
                      Examples: gpt-4, claude-3-opus, mistral-7b, ...
    -n, --dry-run      Show changes without committing
    -l, --list         List available models
    -h, --help         Show this help
EOF
    exit 1
}

# Default model selection
select_default_model() {
    local models
    models=$(llm models)
    if echo "$models" | grep -q 'o3-mini'; then
        echo "o3-mini"
    elif echo "$models" | grep -q 'deepseek-coder'; then
        echo "deepseek-coder"
    elif echo "$models" | grep -q 'claude-3-5-sonnet'; then
        echo "claude-3-5-sonnet"
    elif echo "$models" | grep -q 'gpt-4o'; then
        echo "gpt-4o"
    else
        # pick the alphabetically first model
        echo "$models" | head -n 1
    fi
}

# Default values
model=$(select_default_model)
dry_run=false
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Capture original arguments before parsing
original_args=("$@")
dry_run=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -m|--model)
            model="$2"
            shift 2
            ;;
        -n|--dry-run)
            dry_run=true
            shift
            ;;
        -l|--list)
            echo "Available models:"
            llm models
            exit 0
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            usage
            ;;
    esac
done

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository" >&2
    exit 1
fi

# Check for any changes (staged, unstaged, or untracked)
if [ -z "$(git status --porcelain)" ]; then
    echo "Error: No changes to commit" >&2
    exit 1
fi

if [ "$dry_run" = true ]; then
    echo "=== Changes to be committed ==="
    git status --short
fi

# Generate commit message with progress indicator
echo -e "\n== Commit Message (via ${model}) =="
echo -n "Generating commit message... " >&2
commit_msg=$(llm \
  --model "$model" \
  "Create a commit message for the following changes:

\`\`\`
$(git diff; git ls-files --others --exclude-standard | xargs -I{} echo "A  {}")
\`\`\`

Format the response as a conventional commit message with a brief title line followed by a more detailed description if needed.
Don't include any other text in the response, just the commit message.
")
printf "\r\033[K" >&2  # Clear progress message

# Strip markdown code fences if present
if [[ "$commit_msg" =~ ^\`\`\`.* ]] && [[ "$commit_msg" =~ \`\`\`$ ]]; then
    commit_msg=$(echo "$commit_msg" | sed -e '1s/^```.*//' -e '$s/```$//' | sed '/^$/d')
fi

# Display the message
echo "$commit_msg"

if [ "$dry_run" = true ]; then
    # Build suggestion command safely
    suggestion="$(basename "$0")"
    filtered_args=()
    for arg in "${original_args[@]}"; do
        [[ "$arg" != "-n" && "$arg" != "--dry-run" ]] && filtered_args+=("$arg")
    done
    if [ ${#filtered_args[@]} -gt 0 ]; then
        suggestion+=" ${filtered_args[*]}"
    fi

    echo -e "\n== Next Steps ==\nTo use a message like this, run:\n  $suggestion"
else
    # Stage and commit changes
    echo -e "\n== Committing changes... ==" >&2
    git add -A
    git commit -m "$commit_msg" && echo "done!"
fi
