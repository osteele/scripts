#!/usr/bin/env bash

set -eu

usage() {
    echo "Usage: $(basename "$0") [-n|--dry-run]" >&2
    echo >&2
    echo "Creates separate commits for each modified file, with commit messages that reference" >&2
    echo "their previous commits. This creates a series of commits that can then be reordered" >&2
    echo "and merged into their previous commits using git-apply-fixups." >&2
    echo >&2
    echo "For each dirty file F, finds its most recent commit C and creates a new commit with" >&2
    echo "message 'f [<hash>] <message>' where <hash> is C's short hash and <message> is C's" >&2
    echo "first message line. These commits can then be reordered next to their referenced" >&2
    echo "commits and marked as 'fixup' in an interactive rebase." >&2
    echo >&2
    echo "Typical workflow:" >&2
    echo "1. Make changes to multiple files" >&2
    echo "2. Run this script (git-create-fixups) to create separate commits" >&2
    echo "3. Run git-apply-fixups to automatically reorder and optionally squash the commits," >&2
    echo "   or run 'git rebase -i HEAD~N' to manually reorder them" >&2
    echo >&2
    echo "Options:" >&2
    echo "  -n, --dry-run   Show what would be done" >&2
    exit 1
}

# Change to git root directory for the duration of the script
cd "$(git rev-parse --show-toplevel)"

# Parse command line options
dry_run=false
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--dry-run)
            dry_run=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

# Get list of dirty (modified) files
dirty_files=$(git diff --name-only)

# Create associative arrays to group files by commit
declare -A files_by_commit
declare -A messages_by_commit

for file in $dirty_files; do
    # Get the most recent commit that modified this file
    commit_info=$(git log -1 --format="%h %s" -- "$file")
    if [ -n "$commit_info" ]; then
        # Split commit_info into hash and message
        commit_hash=${commit_info%% *}
        commit_msg=${commit_info#* }

        # Add file to the array for this commit
        if [ -n "${files_by_commit[$commit_hash]:-}" ]; then
            files_by_commit[$commit_hash]="${files_by_commit[$commit_hash]}"$'\n'"$file"
        else
            files_by_commit[$commit_hash]="$file"
            messages_by_commit[$commit_hash]="$commit_msg"
        fi
    else
        echo "Warning: No previous commits found for $file"
    fi
done

# Process each commit group
for commit_hash in "${!files_by_commit[@]}"; do
    message="f [$commit_hash] ${messages_by_commit[$commit_hash]}"
    if [ "$dry_run" = true ]; then
        echo "Would commit: $message"
        echo "${files_by_commit[$commit_hash]}" | sed 's/^/- /'
        echo
    else
        # Stage and commit all files for this commit
        echo "${files_by_commit[$commit_hash]}" | while read -r file; do
            git add "$file"
        done
        git commit --no-verify -m "$message"
    fi
done
